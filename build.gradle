plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/transpositioners.accesswidener")
}

repositories {
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
    maven {
        // LBA, LNS, and SimplePipes
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        // LibGUI
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        // Satin
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
    maven {
        // Mod Menu
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        // where Grondag's mods live
        name = "vram-group"
        url = "https://maven.vram.io/"
    }
    maven {
        // Cloth Config and REI
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        // REI, odds and ends
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
//    flatDir {
//        dirs "./libs"
//    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Dependencies

    // LBA
    modImplementation("alexiil.mc.lib:libblockattributes-all:${project.lba_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    include "alexiil.mc.lib:libblockattributes-all:${project.lba_version}"

    // LNS
    modImplementation("alexiil.mc.lib:libnetworkstack-base:${project.lns_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    include "alexiil.mc.lib:libnetworkstack-base:${project.lns_version}"

    // LibGUI
    modImplementation("io.github.cottonmc:LibGui:${project.libgui_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    include "io.github.cottonmc:LibGui:${project.libgui_version}"

    // Satin
    modImplementation("io.github.ladysnake:satin:${satin_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }
    include "io.github.ladysnake:satin:${satin_version}"

    // Runtime

    // Mod Menu
    modRuntimeOnly("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // REI
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntimeOnly("dev.architectury:architectury-fabric:${architectury_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // Simple Pipes
    modRuntimeOnly("alexiil.mc.mod:simplepipes-base:${project.simplepipes_version}") {
        exclude group: "net.fabricmc.fabric-api"
        exclude module: "libnetworkstack-base"
    }
    modRuntimeOnly("alexiil.mc.lib:libmultipart-all:${project.lmp_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // Canvas
    modRuntimeOnly("io.vram:canvas-fabric-mc117:${project.canvas_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    compileOnly "com.google.code.findbugs:jsr305:${jsr305_version}"
    compileOnly "org.apiguardian:apiguardian-api:${apiguardian_version}"
}

processResources {
    inputs.property "version", project.version

    exclude("**/*.xcf")

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

compileKotlin.kotlinOptions.jvmTarget = "16"